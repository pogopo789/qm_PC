//$file${./include::Monitor.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: model.qm
// File:  ${./include::Monitor.cpp}
//
// This code has been generated by QM 5.2.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${./include::Monitor.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"  // QP/C++ framework API
#include "bsp.h"    // Board Support Package interface
#include <iostream>   // for cout/cerr
#include <cstdlib>    // for exit()
#include <chrono>
#include "Monitor.h"

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${AOs::Monitor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Monitor} ............................................................
Monitor Monitor::instance;

//${AOs::Monitor::Monitor} ...................................................
Monitor::Monitor()
  : QActive(&initial),
    tim(this, TIMEOUT_SIG, 0U)
{}

//${AOs::Monitor::SM} ........................................................
Q_STATE_DEF(Monitor, initial) {
    //${AOs::Monitor::SM::initial}
    subscribe(TIMEOUT_SIG);
    tim.armX(150,100);
    return tran(&Input);
}

//${AOs::Monitor::SM::Input} .................................................
Q_STATE_DEF(Monitor, Input) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Monitor::SM::Input}
        case Q_ENTRY_SIG: {
            std::cout<<"MONITOR INPUT"<<std::endl;
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Monitor::SM::Input::TIMEOUT}
        case TIMEOUT_SIG: {
            std::cout<<"MONITOR PRINTED"<<std::endl;
            //SensorsEvt *ptr = Q_NEW(SensorsEvt,ONE_SIG);
            //AO_Sensors->POST(ptr,this);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::Monitor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
